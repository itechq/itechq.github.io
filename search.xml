<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hadoop目录结构介绍]]></title>
      <url>%2Fblog%2Fprogram%2Fhadoop-folder-structure.html</url>
      <content type="text"><![CDATA[本文基于Hadoop2.7.3版本编写！ Hadoop Dist目录结构 bin Hadoop基本管理脚本和使用脚本所在目录，是sbin目录下管理脚本的基础实现。可直接使用这些脚本管理及使用Hadoop。 etc Hadoop配置文件所在目录，包括core-site.xml、hdfs-site.xml、yarn-site.xml等。 include 对外提供的编程库头文件，这些头文件均是用C++定义，通常用于C++程序访问HDFS或者编写MapReduce程序。 lib 提供Hadoop对外的编程动态库和静态库，与include目录的头文件结合使用。 libexec 服务器对应的shell配置文件所在目录，可用于配置日志输出目录、启动参数（如JVM参数）等基本信息。 sbin Hadoop管理脚本所在目录，主要包括HDFS和YARN中各类服务的启动和关闭脚本。 share Hadoop各个模块编译后jar文件及doc文档所在目录。 源码导入eclipse编辑源码根目录下pom.xml文件 注释&lt;repositories&gt;节点内Snapshots源，添加Staging源 避免maven从https://repository.apache.org/content/repositories/snapshots下载依赖包，导致很多依赖文件下载不到。 12345&lt;repository&gt; &lt;id&gt;$&#123;distMgmtStagingId&#125;&lt;/id&gt; &lt;name&gt;$&#123;distMgmtStagingName&#125;&lt;/name&gt; &lt;url&gt;$&#123;distMgmtStagingUrl&#125;&lt;/url&gt;&lt;/repository 如下图所示： 修改&lt;properties&gt;节点内distMgmtStagingUrl值 将https://repository.apache.org/service/local/staging/deploy/maven2修改为http://repo2.maven.org/maven2/，解决需要登录Apache私服授权问题。 下载并配置ProtocolBuffer 下载ProtocolBuffer 2.5.0 解压ProtocolBuffer到[HADOOP_SRC_HOME]目录，并将protoc.exe加入PATH环境变量 验证是否配置成功，命令行输入protoc，出现以下信息代表配置成功 12C:\Users\Jason&gt;protocMissing input file. 该配置主要解决如下错误提示： 12345678910[ERROR] Failed to execute goal org.apache.hadoop:hadoop-maven-plugins:2.7.3:protoc (compile-protoc) on project did not return a version -&gt; [Help 1][ERROR][ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR][ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException[ERROR][ERROR] After correcting the problems, you can resume the build with the command[ERROR] mvn &lt;goals&gt; -rf :hadoop-common 转换工程并导入cmd进入源码目录，通过如下命令，首先安装Hadoop依赖插件，然后转换工程为eclipse工程。 1234cd hadoop-maven-pluginsmvn installcd ..mvn eclipse:eclipse -DskipTests 当出现以下提示时，表示转换成功。 转换完成后，通过Eclipse导入工程即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS 7编译Hadoop 2.7.3]]></title>
      <url>%2Fblog%2Fprogram%2Fhadoop-compile-on-centos.html</url>
      <content type="text"><![CDATA[编译环境 CentOS Linux release 7.2.1511 (Core) Hadoop 2.7.3 JDK 1.7.0_80 编译准备本文参考Hadoop源码中官方编译文档BUILDING.txt编写。 安装Maven 安装命令 1yum -y install maven 检查命令 1rpm -q maven 安装依赖包 安装命令 1yum -y install build-essential autoconf automake libtool cmake zlib1g-dev pkg-config libssl-dev 检查命令 1rpm -q build-essential autoconf automake libtool cmake zlib1g-dev pkg-config libssl-dev 注意: 执行安装命令后，会出现以下提示信息： No package build-essential available.Package autoconf-2.69-11.el7.noarch already installed and latest versionPackage automake-1.13.4-3.el7.noarch already installed and latest versionPackage libtool-2.4.2-21.el7_2.x86_64 already installed and latest versionPackage cmake-2.8.11-5.el7.x86_64 already installed and latest versionNo package zlib1g-dev available.No package pkg-config available.No package libssl-dev available. No package build-essential available.解决方案 1yum groupinstall &apos;Development Tools&apos; No package zlib1g-dev available.解决方案 12yum install zlibyum install zlib-devel No package pkg-config available.解决方案 1yum install pkgconfig No package libssl-dev available.解决方案 12yum install opensslyum install openssl-devel 安装ProtocolBuffer 安装命令 1yum -y install libprotobuf-dev protobuf-compiler 检查命令 1rpm -q libprotobuf-dev protobuf-compiler 安装Findbugs 下载Findbugs 1wget http://kent.dl.sourceforge.net/project/findbugs/findbugs/3.0.1/findbugs-3.0.1.tar.gz 解压Findbugs到/usr/share/findbugs目录 12345# 解压findbugs-3.0.1tar -zxvf findbugs-3.0.1.tar.gz# 重命名为findbugsmv findbugs-3.0.1 findbugs 配置环境变量 123456789# 编辑 ~/.bashrc文件vi ~/.bashrc# 配置Findbugs环境变量export FINDBUGS_HOME=/usr/share/findbugsexport PATH=$FINDBUGS_HOME/bin:$PATH# 编译.bashrc文件使其生效source ~/.bashrc 检查是否安装成功 1234findbug -version# 输出以下结果表示安装成功3.0.1 开始编译12345678910111213141516171819# Create binary distribution without native code and without documentation:$ mvn package -Pdist -DskipTests -Dtar# Create binary distribution with native code and with documentation:$ mvn package -Pdist,native,docs -DskipTests -Dtar# Create source distribution:$ mvn package -Psrc -DskipTests# Create source and binary distributions with native code and documentation:$ mvn package -Pdist,native,docs,src -DskipTests -Dtar# Create a local staging version of the website (in /tmp/hadoop-site)$ mvn clean site; mvn site:stage -DstagingDirectory=/tmp/hadoop-site 编辑完成后，会在[HADOOP_SOURCE_HOME]/hadoop-dist/target目录生成相关发布包，如下图所示： 常见问题Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7123456789101112[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7:run (make) on project hadoop-common: An Ant BuildException has occured: exec returned: 1[ERROR] around Ant part ...&lt;exec dir=&quot;/opt/software/hadoop-2.7.3-src/hadoop-common-project/hadoop-common/target/native&quot; executable=&quot;cmake&quot; failonerror=&quot;true&quot;&gt;... @ 4:134 in /opt/software/hadoop-2.7.3-src/hadoop-common-project/hadoop-common/target/antrun/build-main.xml[ERROR] -&gt; [Help 1][ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command [ERROR] mvn &lt;goals&gt; -rf :hadoop-common 问题原因 缺少zlib1g-dev、libssl-dev依赖库]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS7 关闭默认防火墙]]></title>
      <url>%2Fblog%2Ftechnology%2Fcentos-disable-default-firewall.html</url>
      <content type="text"><![CDATA[CentOS 7 默认使用的是firewall防火墙，若想使用iptables需重新安装一下，步骤如下。 关闭原有防火墙12345678# 停止firewallsystemctl stop firewalld.service # 禁止开机启动firewallsystemctl disable firewalld.serviceRemoved symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.Removed symlink /etc/systemd/system/basic.target.wants/firewalld.service. 安装iptables service1yum -y install iptables-services 安装过程中会输出以下信息：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.ustc.edu.cn * extras: mirrors.163.com * updates: mirrors.163.comResolving Dependencies--&gt; Running transaction check---&gt; Package iptables-services.x86_64 0:1.4.21-16.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved======================================================================================================================================= Package Arch Version Repository Size=======================================================================================================================================Installing: iptables-services x86_64 1.4.21-16.el7 base 50 kTransaction Summary=======================================================================================================================================Install 1 PackageTotal download size: 50 kInstalled size: 24 kDownloading packages:warning: /var/cache/yum/x86_64/7/base/packages/iptables-services-1.4.21-16.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEYPublic key for iptables-services-1.4.21-16.el7.x86_64.rpm is not installediptables-services-1.4.21-16.el7.x86_64.rpm | 50 kB 00:00:00 Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7Importing GPG key 0xF4A80EB5: Userid : &quot;CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;&quot; Fingerprint: 6341 ab27 53d7 8a78 a7c2 7bb1 24c6 a8a7 f4a8 0eb5 Package : centos-release-7-2.1511.el7.centos.2.10.x86_64 (@anaconda) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7Running transaction checkRunning transaction testTransaction test succeededRunning transactionWarning: RPMDB altered outside of yum.** Found 9 pre-existing rpmdb problem(s), &apos;yum check&apos; output follows:icedtea-web-1.6.1-4.el7.x86_64 has missing requires of java-1.8.0-openjdkjline-1.0-8.el7.noarch has missing requires of java &gt;= (&apos;0&apos;, &apos;1.5&apos;, None)jline-1.0-8.el7.noarch has missing requires of jpackage-utils1:libreoffice-core-4.3.7.2-5.el7.x86_64 has missing requires of java-headless &gt;= (&apos;1&apos;, &apos;1.6&apos;, None)1:libreoffice-ure-4.3.7.2-5.el7.x86_64 has missing requires of libjvm.so()(64bit)rhino-1.7R4-5.el7.noarch has missing requires of jpackage-utilsrhino-1.7R4-5.el7.noarch has missing requires of jpackage-utilstagsoup-1.2.1-8.el7.noarch has missing requires of jpackage-utilstagsoup-1.2.1-8.el7.noarch has missing requires of jpackage-utils &gt;= (&apos;0&apos;, &apos;1.6&apos;, None) Installing : iptables-services-1.4.21-16.el7.x86_64 1/1 Verifying : iptables-services-1.4.21-16.el7.x86_64 1/1 Installed: iptables-services.x86_64 0:1.4.21-16.el7 Complete! 常用命令查看防火墙状态1234# 推荐使用systemctl status iptables.serviceservice iptables status 停止防火墙1234# 推荐使用systemctl stop iptables.serviceservice iptables stop 启用防火墙1234# 推荐使用systemctl start iptables.serviceservice iptables start 重启防火墙1234# 推荐使用systemctl restart iptables.serviceservice iptables restart 禁用防火墙1234# 推荐使用systemctl disable iptables.servicechkconfig iptables off 禁用后启用防火墙1234# 推荐使用systemctl enable iptables.servicechkconfig iptables on]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS 7安装Hadoop 2.7.3]]></title>
      <url>%2Fblog%2Fprogram%2Fhadoop-install-on-centos.html</url>
      <content type="text"><![CDATA[软硬件环境 虚拟机软件：Oracle VM VirtualBox 操作系统：CentOS7 JDK：1.7 Hadoop：2.7.3 网络架构本文在Windows10主机上通过Oracle VM VirtualBox搭建三个虚拟机，一个Master，两个Slave，具体网络环境如下图所示： 安装步骤主机名及IP配置 修改主机名 编辑vi /etc/hostname文件，分别在对应的虚拟机中输入：hd-master,hd-slave1,hd-slave2,出现以下结果，表示修改成功.1234567891011# 在hd-master中输入`hostname`命令$ hostnamehd-master# 在hd-slave1中输入`hostname`命令$ hostnamehd-slave1# 在hd-slave2中输入`hostname`命令$ hostnamehd-slave2 配置hosts文件 分别在三台虚拟机中输入命令vi /etc/hosts，并都输入以下内容:123192.168.0.121 hd-master192.168.0.122 hd-slave1192.168.0.123 hd-slave2 三台虚拟机能够互相通过ping hd-master,ping hd-slave1,ping hd-slave2连通代表配置成功。 安装JDK安装前使用命令java -version检查系统是否安装默认JDK版本，若有安装，请先卸载系统自带JDK，具体步骤参考另外一篇博客CentOS 卸载OpenJDK，安装OracleJDK，然后在Oracle官网下载JDK 1.7版本,以安装jdk-7u80-linux-x64.tar.gz为例。 解压JDK到/usr/lib/jvm目录 1234$ mkdir -p /usr/lib/jvm$ cd /usr/lib/jvm/$ tar -zxvf /home/hadoop/soft/jdk-7u80-linux-x64.tar.gz$ mv jdk1.7.0_80 jdk 配置环境变量 为安全起见，只给hadoop用户设置环境变量。进入hadoop用户目录，编辑.bashrc文件（该文件为隐藏文件），可通过如下命令查看： 1$ ll -a 通过VI编辑.bashrc文件，输入命令vi .bashrc,在文件末尾输入如下内容：1234export JAVA_HOME=/usr/lib/jvm/jdkexport JRE_HOME=$JAVA_HOME/jreexport PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar 编译.bashrc文件，输入命令source .bashrc使其生效。 检查JDK是否安装成功12345$ java -versionjava version &quot;1.7.0_80&quot;Java(TM) SE Runtime Environment (build 1.7.0_80-b15)Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) 配置SSH免密码登录 启动SSH免密码登录设置 编辑/etc/ssh/sshd_config,去掉以下两行注释：12#RSAAuthentication yes#PubkeyAuthentication yes 生成公钥、私钥文件 输入命令ssh-keygen -t rsa，一直回车，完成后就会在/home/hadoop/.ssh文件夹，每台服务器都需要设置，如下图所示: 输入命令ll ~/.ssh，可看到如下文件： 合并公钥到authorized_keys文件 进入hd-master服务器/home/hadoop/.ssh/目录，通过ssh命令合并123cat id_rsa.pub &gt;&gt; authorized_keysssh hadoop@192.168.0.122 cat ~/.ssh/id_rsa.pub &gt;&gt; authorized_keysssh hadoop@192.168.0.123 cat ~/.ssh/id_rsa.pub &gt;&gt; authorized_keys 此时hd-master,hd-slave1,hd-slave2服务器的公钥文件都合并到authorized_keys文件之中，可通过more authorized_keys查看，该过程操作截图如下： 拷贝authorized_keys文件到hd-slave1,hd-slave2服务器 通过scp命令拷贝authorized_keys到hd-slave1,hd-slave2服务器/home/hadoop/.ssh/目录。 12scp authorized_keys hadoop@hd-slave1:~/.sshscp authorized_keys hadoop@hd-slave2:~/.ssh 该过程操作截图如下： 修改authorized_keys权限 分别修改hd-master,hd-slave1,hd-slave2服务器authorized_keys文件权限1chmod 700 authorized_keys 测试SSH免密码登录 进入hd-master,输入ssh username@hostname测试是否配置成功，如下图所示： 安装配置Hadoop下载Hadoop1wget http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz 安装Hadoop假设将hadoop相关软件都安装到/usr/local目录下，现在将/usr/local目录赋权给hadoop用户，使用如下命令 1chown hadoop:hadoop /usr/local 解压hadoop-2.7.3.tar.gz并拷贝到/usr/local目录.12tar -zxvf hadoop-2.7.3.tar.gz mv hadoop-2.7.3 /usr/local/hadoop 创建数据存放目录进入/usr/local/hadoop目录，创建tmp、hdfs/data、hdfs/name目录。123cd /usr/local/hadoopmkdir tmpmkdir -p hdfs/data hdfs/name 配置core-site.xml进入/usr/local/hadoop/etc/hadoop编辑core-site.xml文件1234567891011121314&lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://hd-master:9000&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;io.file.buffer.size&lt;/name&gt; &lt;value&gt;131702&lt;/value&gt;&lt;/property&gt; 配置hdfs-site.xml进入/usr/local/hadoop/etc/hadoop编辑hdfs-site.xml文件 123456789101112131415161718192021222324&lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/hdfs/name&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/hdfs/data&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;2&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;hd-master:9001&lt;/value&gt;&lt;/property&gt; 主机配置 修改/usr/local/hadoop/etc/hadoop/masters文件 1hd-master 修改/usr/local/hadoop/etc/hadoop/slaves文件 12hd-slave1hd-slave2 复制Hadoop到其他各个节点12scp -r /usr/local/hadoop hd-slave1:/usr/localscp -r /usr/local/hadoop hd-slave2:/usr/local 到此，Hadoop安装及基本配置以及完成，下面就进行启动和验证基本功能。 启动及验证Hadoop格式化HDFS文件系统在hd-master格式化HDFS文件系统，该动作只需执行一次即可 12cd /usr/local/hadoop/binhdfs namenode -format 执行后控制台输出如下所示，看到Exiting with status 0表示格式化成功。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697016/08/28 17:30:19 INFO namenode.NameNode: STARTUP_MSG: /************************************************************STARTUP_MSG: Starting NameNodeSTARTUP_MSG: host = hd-master/192.168.0.121STARTUP_MSG: args = [-format]STARTUP_MSG: version = 2.7.3STARTUP_MSG: classpath = /usr/local/hadoop/etc/hadoop……STARTUP_MSG: build = https://git-wip-us.apache.org/repos/asf/hadoop.git -r baa91f7c6bc9cb92be5982de4719c1c8af91ccff; compiled by &apos;root&apos; on 2016-08-18T01:41ZSTARTUP_MSG: java = 1.7.0_80************************************************************/16/08/28 17:30:19 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]16/08/28 17:30:19 INFO namenode.NameNode: createNameNode [-format]Formatting using clusterid: CID-d6400139-18c9-4416-935c-33f8944b5efe16/08/28 17:30:21 INFO namenode.FSNamesystem: No KeyProvider found.16/08/28 17:30:21 INFO namenode.FSNamesystem: fsLock is fair:true16/08/28 17:30:21 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=100016/08/28 17:30:21 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true16/08/28 17:30:21 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.00016/08/28 17:30:21 INFO blockmanagement.BlockManager: The block deletion will start around 2016 Aug 28 17:30:2116/08/28 17:30:21 INFO util.GSet: Computing capacity for map BlocksMap16/08/28 17:30:21 INFO util.GSet: VM type = 64-bit16/08/28 17:30:21 INFO util.GSet: 2.0% max memory 966.7 MB = 19.3 MB16/08/28 17:30:21 INFO util.GSet: capacity = 2^21 = 2097152 entries16/08/28 17:30:21 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false16/08/28 17:30:21 INFO blockmanagement.BlockManager: defaultReplication = 216/08/28 17:30:21 INFO blockmanagement.BlockManager: maxReplication = 51216/08/28 17:30:21 INFO blockmanagement.BlockManager: minReplication = 116/08/28 17:30:21 INFO blockmanagement.BlockManager: maxReplicationStreams = 216/08/28 17:30:21 INFO blockmanagement.BlockManager: replicationRecheckInterval = 300016/08/28 17:30:21 INFO blockmanagement.BlockManager: encryptDataTransfer = false16/08/28 17:30:21 INFO blockmanagement.BlockManager: maxNumBlocksToLog = 100016/08/28 17:30:21 INFO namenode.FSNamesystem: fsOwner = hadoop (auth:SIMPLE)16/08/28 17:30:21 INFO namenode.FSNamesystem: supergroup = supergroup16/08/28 17:30:21 INFO namenode.FSNamesystem: isPermissionEnabled = true16/08/28 17:30:21 INFO namenode.FSNamesystem: HA Enabled: false16/08/28 17:30:21 INFO namenode.FSNamesystem: Append Enabled: true16/08/28 17:30:21 INFO util.GSet: Computing capacity for map INodeMap16/08/28 17:30:21 INFO util.GSet: VM type = 64-bit16/08/28 17:30:21 INFO util.GSet: 1.0% max memory 966.7 MB = 9.7 MB16/08/28 17:30:21 INFO util.GSet: capacity = 2^20 = 1048576 entries16/08/28 17:30:21 INFO namenode.FSDirectory: ACLs enabled? false16/08/28 17:30:21 INFO namenode.FSDirectory: XAttrs enabled? true16/08/28 17:30:21 INFO namenode.FSDirectory: Maximum size of an xattr: 1638416/08/28 17:30:21 INFO namenode.NameNode: Caching file names occuring more than 10 times16/08/28 17:30:21 INFO util.GSet: Computing capacity for map cachedBlocks16/08/28 17:30:21 INFO util.GSet: VM type = 64-bit16/08/28 17:30:21 INFO util.GSet: 0.25% max memory 966.7 MB = 2.4 MB16/08/28 17:30:21 INFO util.GSet: capacity = 2^18 = 262144 entries16/08/28 17:30:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.999000012874603316/08/28 17:30:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 016/08/28 17:30:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension = 3000016/08/28 17:30:21 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 1016/08/28 17:30:21 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 1016/08/28 17:30:21 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,2516/08/28 17:30:21 INFO namenode.FSNamesystem: Retry cache on namenode is enabled16/08/28 17:30:21 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis16/08/28 17:30:21 INFO util.GSet: Computing capacity for map NameNodeRetryCache16/08/28 17:30:21 INFO util.GSet: VM type = 64-bit16/08/28 17:30:21 INFO util.GSet: 0.029999999329447746% max memory 966.7 MB = 297.0 KB16/08/28 17:30:21 INFO util.GSet: capacity = 2^15 = 32768 entries16/08/28 17:30:22 INFO namenode.FSImage: Allocated new BlockPoolId: BP-1205337113-192.168.0.121-147237662191216/08/28 17:30:22 INFO common.Storage: Storage directory /usr/local/hadoop/hdfs/name has been successfully formatted.16/08/28 17:30:22 INFO namenode.FSImageFormatProtobuf: Saving image file /usr/local/hadoop/hdfs/name/current/fsimage.ckpt_0000000000000000000 using no compression16/08/28 17:30:22 INFO namenode.FSImageFormatProtobuf: Image file /usr/local/hadoop/hdfs/name/current/fsimage.ckpt_0000000000000000000 of size 353 bytes saved in 0 seconds.16/08/28 17:30:22 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 016/08/28 17:30:22 INFO util.ExitUtil: Exiting with status 016/08/28 17:30:22 INFO namenode.NameNode: SHUTDOWN_MSG: /************************************************************SHUTDOWN_MSG: Shutting down NameNode at hd-master/192.168.0.121************************************************************/ 启动Hadoop进入/usr/local/hadoop/sbin目录下执行以下命令，建议关闭防火墙。 123cd /usr/local/hadoop/sbin./start-dfs.sh./start-yarn.sh 执行后控制台输出如下信息：12345678910111213# start-dfs.shStarting namenodes on [hd-master]hd-master: starting namenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-namenode-hd-master.outhd-slave1: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-hd-slave1.outhd-slave2: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-hd-slave2.outStarting secondary namenodes [hd-master]hd-master: starting secondarynamenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-secondarynamenode-hd-master.out# start-yarn.shstarting yarn daemonsstarting resourcemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-resourcemanager-hd-master.outhd-slave1: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-hd-slave1.outhd-slave2: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-hd-slave2.out 验证是否启动成功 使用java的jps工具检查 分别在hd-master,hd-slave1,hd-slave2服务器上输入jps命令： 123456789101112131415161718# hd-master[hadoop@hd-master hadoop]$ jps12744 Jps12368 ResourceManager11983 NameNode12170 SecondaryNameNode# hd-slave1[hadoop@hd-slave1 hadoop]$ jps11052 NodeManager11254 Jps10931 DataNode# hd-slave2[hadoop@hd-slave2 hadoop]$ jps10663 DataNode11035 Jps10776 NodeManager 使用./bin/hdfs dfsadmin -report查看状态 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[hadoop@hd-master hadoop]$ ./bin/hdfs dfsadmin -reportConfigured Capacity: 88624291840 (82.54 GB)Present Capacity: 80397443072 (74.88 GB)DFS Remaining: 80397434880 (74.88 GB)DFS Used: 8192 (8 KB)DFS Used%: 0.00%Under replicated blocks: 0Blocks with corrupt replicas: 0Missing blocks: 0Missing blocks (with replication factor 1): 0-------------------------------------------------Live datanodes (2):Name: 192.168.0.123:50010 (hd-slave2)Hostname: hd-slave2Decommission Status : NormalConfigured Capacity: 44312145920 (41.27 GB)DFS Used: 4096 (4 KB)Non DFS Used: 4113416192 (3.83 GB)DFS Remaining: 40198725632 (37.44 GB)DFS Used%: 0.00%DFS Remaining%: 90.72%Configured Cache Capacity: 0 (0 B)Cache Used: 0 (0 B)Cache Remaining: 0 (0 B)Cache Used%: 100.00%Cache Remaining%: 0.00%Xceivers: 1Last contact: Sun Aug 28 18:19:42 CST 2016Name: 192.168.0.122:50010 (hd-slave1)Hostname: hd-slave1Decommission Status : NormalConfigured Capacity: 44312145920 (41.27 GB)DFS Used: 4096 (4 KB)Non DFS Used: 4113432576 (3.83 GB)DFS Remaining: 40198709248 (37.44 GB)DFS Used%: 0.00%DFS Remaining%: 90.72%Configured Cache Capacity: 0 (0 B)Cache Used: 0 (0 B)Cache Remaining: 0 (0 B)Cache Used%: 100.00%Cache Remaining%: 0.00%Xceivers: 1Last contact: Sun Aug 28 18:19:44 CST 2016 访问WEB管理页面 访问Namenode页面 浏览器输入：http://192.168.0.121:50070/ 访问Cluster页面 浏览器输入：http://192.168.0.121:8088/ 到此，Hadoop环境搭建完成。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS 卸载OpenJDK，安装OracleJDK]]></title>
      <url>%2Fblog%2Ftechnology%2Fcentos-unistall-openjdk-and-install-oraclejdk.html</url>
      <content type="text"><![CDATA[CentOS系统自带OpenJDK，但是我们平时开发都是用OracleJDK，下面记录如何卸载OpenJDK，再安装OracleJDK，供以后查阅。 卸载OpenJDK查看CentOS是否安装JDK使用java -version命令，如下所示：1234$ java -versionopenjdk version &quot;1.8.0_91&quot;OpenJDK Runtime Environment (build 1.8.0_91-b14)OpenJDK Server VM (build 25.91-b14, mixed mode) 查看已经安装的JDK信息使用rpm -qa | grep java命令，如下所示：123456$ rpm -qa | grep java java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el6_7.i686tzdata-java-2016d-1.el6.noarchjava-1.8.0-openjdk-1.8.0.91-0.b14.el6_7.i686# 其他命令：rpm -qa | grep jdk 卸载OpenJDK使用rpm -e --nodeps [java.xx]，记得使用有权限用户，如下所示；123$ rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el6_7.i686$ rpm -e --nodeps tzdata-java-2016d-1.el6.noarch$ rpm -e --nodeps java-1.8.0-openjdk-1.8.0.91-0.b14.el6_7.i686 检查是否卸载完成使用java -version命令，如下所示；12$ java -versionbash: java: command not found 出现以上信息，表示卸载成功。 安装Oracle JDK下载Oracle JDK使用CentOSwget命令下载，虽然Oracle官方不允许直接下载JDK，但是我们可以获取下载地址后拷贝出来下载，授权后的下载地址wget http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7，下载结果如下所示： 123456789101112$ wget http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7--2016-06-24 14:24:26-- http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7Resolving download.oracle.com... 184.25.56.53, 184.25.56.42Connecting to download.oracle.com|184.25.56.53|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 136775360 (130M) [application/x-redhat-package-manager]Saving to: `jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7&apos;100%[=============================================================================================&gt;] 136,775,360 16.1M/s in 7.6s 2016-06-24 14:24:34 (17.2 MB/s) - `jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7&apos; saved [136775360/136775360] 重命名JDK由于下载后的JDK名字为jdk-7u80-linux-i586.rpm?AuthParam=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7，所以我们需要重命名一下，命令如下：12345-- 重命名$ mv jdk-7u80-linux-i586.rpm\?AuthParam\=1466749556_f8c61ecf9ec04d793d7f28fc427ea6d7 jdk-7u80-linux-i586.rpm-- 修改文件权限$ chmod 777 jdk-7u80-linux-i586.rpm 安装JDK执行如下命令，选择yes直到安装完毕。1234567891011121314$ rpm -ivh jdk-7u80-linux-i586.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%]Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... plugin.jar... javaws.jar... deploy.jar... 检查是否安装成功使用java -version命令，如下所示：1234$ java -versionjava version &quot;1.7.0_80&quot;Java(TM) SE Runtime Environment (build 1.7.0_80-b15)Java HotSpot(TM) Client VM (build 24.80-b11, mixed mode, sharing)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows根据端口号查找进程名]]></title>
      <url>%2Fblog%2Fnotes%2Ffind-process-name-by-port.html</url>
      <content type="text"><![CDATA[有时候我们电脑装的很多程序都会监听同一个端口(如：80端口)，当某个程序真的想监听这个端口的时候，发现已经被占用，但是又不知道被哪个进程占用，通过以下几步可以通过端口号定位进程名。 下面我通过查找3306端口为例！ 根据端口号查找PID，命令如下：1netstat -ano | findstr 3306 根据PID查找进程名，命令如下：1tasklist | findstr 2292 操作截图 矩形框表示端口所占进程PID，椭圆表示端口所占进程名 natstat中ano含义可通过帮助命令netstat \查看：123456789101112131415161718192021222324252627282930313233343536373839404142C:\Users\Jason&gt;netstat \显示协议统计信息和当前 TCP/IP 网络连接。NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval] -a 显示所有连接和侦听端口。 -b 显示在创建每个连接或侦听端口时涉及的 可执行程序。在某些情况下，已知可执行程序承载 多个独立的组件，这些情况下， 显示创建连接或侦听端口时 涉及的组件序列。在此情况下，可执行程序的 名称位于底部 [] 中，它调用的组件位于顶部， 直至达到 TCP/IP。注意，此选项 可能很耗时，并且在你没有足够 权限时可能失败。 -e 显示以太网统计信息。此选项可以与 -s 选项 结合使用。 -f 显示外部地址的完全限定 域名(FQDN)。 -n 以数字形式显示地址和端口号。 -o 显示拥有的与每个连接关联的进程 ID。 -p proto 显示 proto 指定的协议的连接；proto 可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。 -q 显示所有连接、侦听端口和绑定的 非侦听 TCP 端口。绑定的非侦听端口 不一定与活动连接相关联。 -r 显示路由表。 -s 显示每个协议的统计信息。默认情况下， 显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息; -p 选项可用于指定默认的子网。 -t 显示当前连接卸载状态。 -x 显示 NetworkDirect 连接、侦听器和共享 终结点。 -y 显示所有连接的 TCP 连接模板。 无法与其他选项结合使用。 interval 重新显示选定的统计信息，各个显示间暂停的 间隔秒数。按 CTRL+C 停止重新显示 统计信息。如果省略，则 netstat 将打印当前的 配置信息一次。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git常用命令整理]]></title>
      <url>%2Fblog%2Ftechnology%2Fgit-manual.html</url>
      <content type="text"><![CDATA[本文参考廖雪峰Git教程，根据个人使用情况整理完成。 基本配置说明：以下配置都以Windows系统为例！ 设置用户名、邮箱提交代码前，需要告诉git是谁提交，邮箱是什么，所以需要对git做基本配置。打开终端，执行如下命令： 12git config --global user.name &quot;你的名字或昵称&quot;git config --global user.email &quot;你的邮箱&quot; 执行完以上命令后，会在C:\Users\用户名\目录下生成.gitconfig文件，内容如下： SSH Key密钥生成以对接码云为例，生成密钥，执行以下代码：1ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; # Creates a new ssh key using the provided email 执行完以上命令后，会在C:\Users\用户名\.ssh目录下生成以下两个文件，如下图： 然后将public key添加到Git@OSC http://git.oschina.net/keys，添加后，在终端输入：1ssh -T git@git.oschina.net 若返回如下信息，则表示添加成功。1Welcome to Git@OSC, itechq! 查看配置信息要检查已有配置信息，可用git config --list：123456789101112131415$ git config --listcore.symlinks=falsecore.autocrlf=truecore.fscache=truecolor.diff=autocolor.status=autocolor.branch=autocolor.interactive=truehelp.format=htmlhttp.sslcainfo=D:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crtdiff.astextplain.textconv=astextplainrebase.autosquash=truecredential.helper=manageruser.name=itechquser.email=csch112@163.com 获取帮助想查询某个命令如何使用，可使用如下命令123git help &lt;verb&gt;git &lt;verb&gt; --helpman git-&lt;verb&gt; 常用命令初始化1git init 克隆12345# 克隆到远程仓库目录git clone [url]# 克隆到指定目录git clone [url] [dir] 查看状态1git status 暂存更新12345# 添加指定文件，支持*通配符git add [file]# 添加所有文件git add -A 提交更新1git commit -m &quot;注释信息&quot; 查看日志12345678910111213141516171819202122$ git logcommit 4690f5809f35fca65148232de41ba6b5f10221baAuthor: itechq &lt;csch112@163.com&gt;Date: Sat Jun 11 00:15:57 2016 +0800 新增IDEA快捷键收录commit 7985f617f14d3793d6cded26364622688f0c245bAuthor: itechq &lt;csch112@163.com&gt;Date: Sat Jun 11 00:07:37 2016 +0800 修改搜索引擎为本地搜索commit 8c7f506faeb2c9d153c9bfba7e7729d96294f7b0Author: itechq &lt;csch112@163.com&gt;Date: Fri Jun 10 22:52:22 2016 +0800 优化七牛同步工具commit 526885e57db40c05c431ca129f739fc7d007bc1dAuthor: itechq &lt;csch112@163.com&gt;Date: Fri Jun 10 22:33:08 2016 +0800 通常用-p选项展开显示每次提交的内容差异，用-2则仅显示最近的两次更新123456789101112$ git log -p -2commit 4690f5809f35fca65148232de41ba6b5f10221baAuthor: itechq &lt;csch112@163.com&gt;Date: Sat Jun 11 00:15:57 2016 +0800 新增IDEA快捷键收录diff --git a/source/_posts/2016-06-11-intellij-idea-hotkey.md b/source/_posts/2016-06-11-intellij-idea-hotkey.mdnew file mode 100644index 0000000..73d034a--- /dev/null+++ b/source/_posts/2016-06-11-intellij-idea-hotkey.md 版本回退首先通过git log命令查看版本库提交记录，即查看日志命令输出结果，若要回退版本，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，即最新提交的4690f5809f35fca65148232de41ba6b5f10221ba，上一个版本就是HEAD^，上上一个版本就是HEAD^^，依次类推，若往上很多版本（如100个），一般写成HEAD~100。 回退版本，使用如下命令：1234git reset --hard commit_id# 回退到上一版本git reset --hard HEAD^ 若又想回退到新版本，但是找不到commit_id了，可通过git reflog命令，该命令会记录每一次操作命令12345$ git reflog4690f58 HEAD@&#123;0&#125;: commit: 新增IDEA快捷键收录7985f61 HEAD@&#123;1&#125;: commit: 修改搜索引擎为本地搜索8c7f506 HEAD@&#123;2&#125;: commit: 优化七牛同步工具526885e HEAD@&#123;3&#125;: commit (initial): init project 撤销修改如果想恢复工作区文件到上一个版本，可使用命令git checkout -- file来丢弃工作区修改：1git checkout -- readme.txt 即把readme.txt文件在工作区的修改全部撤销，有两种情况： readme.txt自修改后还没放到暂存区，现在撤销修改后回到和版本库状态一样 readme.txt已放到暂存区后，又做了修改，现在撤销修改就回到添加到暂存区后的状态 注意：git checkout -- file命令中的--很重要，若没有--，就变成切换到另一个分支命令 撤销已暂存文件若某个文件已经加入暂存区，现在想撤销掉，用以下命令：1git reset HEAD file 删除文件删除本地文件，使用如下命令：1rm file 从Git库删除，使用如下操作命令： 12345# 1.从版本库删除文件git rm file# 2.提交删除git commit -m &quot;注释信息&quot; 误删除，需要恢复文件，使用如下命令： 1git checkout -- file 添加远程仓库 关联远程仓管 12# 将本地仓库与远程仓库关联git remote add origin git@git.oschina.net:itechq/hotch-hexo.git 首次推送本地仓库到远程仓库 1git push -u origin master 再次推送本地仓库到远程仓库 1git push origin master]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IntelliJ IDEA 快捷键收录]]></title>
      <url>%2Fblog%2Ftechnology%2Fintellij-idea-hotkey.html</url>
      <content type="text"><![CDATA[Ctrl123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869Ctrl + Y 删除行ctrl + X 剪切行Ctrl + N 查找类Ctrl + R 替换Ctrl + O 选择可覆盖/继承的方法Ctrl + F 当前代码中查找Ctrl + J 自动代码提示（提示的是自己定义的代码格式）Ctrl + D 复制行或是块(默认是这个意思)(但是我一般习惯改成专门复制行,不包括块,搜索Duplicate Lines)Ctrl + P 方法参数提示显示Ctrl + W 选中光标所在的单词 ，连续按会有其他效果 (相反的是Ctrl+Shift+W)Ctrl + Q 鼠标放在变量/类名/方法名等上面（也可以在提示补充的时候按），显示文档内容，同类似的功能还有一个Ctrl + Shift + ICtrl + B 快速打开光标处的类或方法（对于前端支持很好,比如可以直接通过class的name定位到css的文件位置）(等同于ctrl+光标指向)Ctrl + E 最近打开的文件Ctrl + U 前往父类的方法/父类Ctrl + K VCS提交项目Ctrl + T VCS更新项目Ctrl + G 跳到指定行Ctrl + H 显示类层次图Ctrl + F1 显示错误Ctrl + F3 调转到所选中的词的下一个同名位置Ctrl + F9 编译Ctrl – F12 当前编辑的文件中快速导航(可以直接键入字母，IntelliJ IDEA会筛选你输入的来匹配对应是否有的方法，来快速定位)(类似结构图)Ctrl + F11 弹出一个小框来指定式添加书签(可以对文件或文件夹起作用)Ctrl + Tab 编辑窗口切换 (如果在切换的过程又加按上delete,则是关闭对应选中的窗口)Ctrl + delete 删除光标后面的单词Ctrl + home/end 跳到文件头文件尾Ctrl + BackSpace 删除光标前面的单词Ctrl + [ 或 ] 移动光标到块的初/末括号地方Ctrl + / 或 Ctrl+Shift+/ 注释（// 或者/*…*/ ）Ctrl + 1，2，3，4…. 快速定位到书签代码处(必须先Ctrl+Shift+1,2,3,4…添加书签)Ctrl + 空格 代码补全提示(因为windows默认被输入法给占用了,可以自己更改下)Ctrl + 小键盘+/- 折叠/展开代码Ctrl + 鼠标单击编辑窗口的文件标题 弹出该文件路径,可以通过这个打开文件所在地方(相当于Ctrl+alt+F12)Ctrl + 方向左/右 光标跳到上/下个单词Ctrl + 方向上/下 相当于你用鼠标滑滚轮(为了方便鼠标党) Alt1234567891011121314151617181920212223242526272829Alt + 1 打开/关闭project选项卡 Alt + ` `这个键是Tab上面那个，按下之后，如果项目有版本控制，则显示常用的版本控制命令Alt + A 在SVN中把新创建的文件加入进来（自己添加，在Subversion类别）Alt + Q 查看方法的声明(在左上角出现一个Tip层提示)，你无需滚动上去查看Alt + F1 弹出文件选择目标，这个很好用的Alt + F2 多个浏览器预览Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示。Alt + F7 查看该方法/变量/类被调用的地方Alt + F8 在debug的状态下，选中某些变量或是对象，按此快捷键弹出可输入变量、方法的调试框，指定查看该内容的debug情况Alt + Home 跳到文件导航barAlt + Insert 生成代码(如get,set方法,构造函数等)Alt + 方向键 左 或 方向键 右 切换当前打开的代码文件视图Alt + 方向键 上 或 方向键 下 在方法间快速移动定位Alt + 鼠标左键单击不放,拖动 可以直接方块区域选择（很有用）Alt + 回车 快速修复(可以用来导入单个包) Shift1234567891011121314151617Shift + F6 重构：重新命名Shift + F11 查看书签Shift + F10 Run(运行)当前程序，相当于点击run按钮Shift + F9 debug当前程序，相当于点击debug按钮Shift + end 选中从光标到end处Shift + home 选中从光标到home处Shift + Enter 光标所在行下空出一行，光标跳下Shift + 单击 可以关闭文件Shift + 滚轮 横向滚动轴滚动(非常强大) Ctrl+Alt12345678910111213141516171819202122232425Ctrl + Alt + W 关闭所有编辑的快捷键（自己添加，在close all）Ctrl + Alt + O 优化导入的类和包Ctrl + Alt + L 格式化代码Ctrl + Alt + I 选中部分自动缩进行（有点类似格式化，但是只是整理行格式而已）Ctrl + Alt + T 选中的地方代码环绕提示Ctrl + Alt + B 跳到具体的实现方法，查找接口/抽象方法的具体实现很好用(相反行为的快捷键是Ctrl+b)Ctrl + Alt + V 快速引进一个变量Ctrl + Alt + F7 寻找被该类或是变量被使用的地方，用弹出框的方式找出来，跟Alt+F7效果一样，但是因为是弹出框，选中了一个位置就会消失。Ctrl + Alt + Enter 光标所在行上空出一行，光标跳上Ctrl + Alt + home 弹出跟当前文件有关联的文件目录(比如jsp里面有导入几个js和css,这些文件就是关联文件)Ctrl + Alt + 方向左/右 退回/前进到上一个操作的地方Ctrl + Alt + 方向上/下 在Find模式下，挑到上/下个查找的文件Ctrl + Alt + 空格 类名或接口名提示(最常用的,一般敲入字母都会提示,但是如果你不小心esc了,可以再按这个出来) Ctrl+Shift12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Ctrl + Shift + F 查找文件（通过某个词，指定要搜索的文件类型，目录（跟myeclipse中的ctrl+H功能一样））Ctrl + Shift + U // 大/小写都是这个快捷键Ctrl + Shift + V 粘贴最近复制过的一些信息Ctrl + Shift + Z ，取消撤销（恢复上一次操作）Ctrl + Shift + T 如果在常规类下按它，弹出已写好的，可选择的对应Test类，如果在该Test类下按它，则直接回到源类。Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板Ctrl + Shift + J 自动将下一行合并到当前行末尾Ctrl + Shift + E 最近更改的文件Ctrl + Shift + I 在方法名或是类名下(或是代码补充提示的时候也可以按，也可以在图片地址上按)，按此快捷键显示该方法或是类的源码结构，无需点击进去查看源码（当然了，必须是你已经导入源码的情况下才看得到） 类似Ctrl+QCtrl + Shift + R 搜索指定范围文件，替换文字Ctrl + Shift + N 通过输入文件名（可以输入部分名称，支持模糊）来定位文件Ctrl + Shift + F12 编辑器全屏Ctrl + Shift + F7 高亮显示所有该选中文本，按Esc高亮消失。(也可以在throws或是try..catch上面按此快捷键，比如在一个方法的throws单词上按这个快捷键，则会把哪些内部方法会抛异常的都显出来)Ctrl + Shift + Del 删除环绕的标签Ctrl + Shift + 1，2，3… 快速添加书签Ctrl + Shift + Space 自动补全代码（智能提示）Ctrl + Shift + Enter 行末自动添加 ; 结束代码 ，如果是输入if，按这个快捷键会自动帮你补充()&#123;&#125;Ctrl + Shift + Enter 自动给末尾加;完成代码Ctrl + Shift + Up 或 Down 移动光标所在statement域移动到上面/下面(13版本会自动格式化)(如果光标放在方法名上 ， 是互换方法位置,如果是打开tool界面，且是竖直方向布局，则根据方向调整窗口大小)Ctrl + Shift + Left 或 Right 打开tool界面，如果是横向布局，则根据左右方向调整窗口大小)Ctrl + Shift + [ 或 ] 选中从光标所在位置到它的父级区域(界面上层导航可能更开)Ctrl + Shift + 小键盘 + 或 – 折叠/展开所有代码Ctrl + Shift + 空格 代码补全功能(最常用的,一般敲入字母都会提示,但是如果你不小心esc了,可以再按这个出来)Ctrl + Shift + 方向左 或 右 选中临边左/右的单词或是符号Ctrl + Shift + Backspace(退格) 回到上次修改的地方(跟Ctrl+Alt+左右方向键不一样的地方是，只回退到修改的地方，而不是过去光标放的地方) Alt+Shift1234567891011Alt + Shift + N 添加任务Alt + Shirt + F 添加到收藏夹Alt + Shift + C 查看最近操作项目的变化情况列表(在版本控制下，显示比较缓慢)Alt + Shift + F10 弹出run菜单，提供选择性run哪个(这个需要自己尝试下，按后会有弹出框，记得查看)Alt + Shift + F9 弹出debug运行菜单，提供选择性debug哪个(这个需要自己尝试下，按后会有弹出框，记得查看)Alt + Shift + 方向键 上 或 方向键 下 移动光标所在行到上/下 Ctrl+Shift+Alt12345Ctrl + Shift + Alt + V 简单黏贴Ctrl + Shift + Alt + N 查找类中的方法或变量Ctrl + Shift + Alt + C 复制参考信息，比如在某个方法名上按此快捷键，得到的内容是：org.jfree.data.general.DefaultPieDataset#setValue(java.lang.Comparable, double)里面有包名，类名，方法名，方法变量 其他1234567891011121314151617F11 添加书签F4 光标放在哪里(即使是一个路径的URL的一小部分都可以)跳到这个路径下的位置,从IntelliJ IDEA的左侧web窗口打开F2 或 Shift+F2 高亮错误或警告快速定位(在代码有报错的情况下)代码标签输入完成后，按Tab，生成代码。在Ctrl+F查找模式下，按F3下一个点在debug模式下，F8下一步，F9下一个断点更改下移的快捷 搜索downCtrl+鼠标单击编辑窗口的文件标题,弹出该文件路径,可以通过这个打开文件所在地方按TAB+拖动代码标签，可以分开IntelliJ IDEA成多个]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[七牛云存储同步工具——为Markdown写作诞生]]></title>
      <url>%2Fblog%2Fprogram%2Fuser-define-qiniu-sync-for-markdown.html</url>
      <content type="text"><![CDATA[缘起三年前买下www.itechq.com这个域名，一直想折腾个自己的博客。由于种种原因，一直没有去折腾。随着国家的长城防火墙越来越厉害，免费翻墙变得越来越困难，从GoAgent到XX-Net，稳定性越来越差。今年年初，实在受不了了，就买了个搬瓦工的VPS（10G SSD，512M内存，一年19刀），自己搭建了一个Shadowsocks Server，每月1000G流量，手机、笔记本都通过它翻墙，目前还比较稳定（不要问我为啥不直接买个收费VPN，因为程序猿爱折腾）。VPN搞定后，发现VPS系统资源利用率很少，此时，又激发了自己的博客梦，从而走上了Wordpress、Hexo的折腾之路…… 为何开发刚开始博客空间是用WP搭建，花了差不多两周时间配置、修改主题代码，后来因为WP对Markdown支持太弱了，而且相对来说比较重，选择放弃，最后选择Hexo纯静态博客空间，托管到Github、Coding。之所以选择七牛作为存储，是因为在配置WP插件时用到wpjam-qiniu插件，可以将网站上的js、css、image等资源自动同步到七牛云，而Hexo没有此类插件。 后来在七牛官网看到官方同步工具qrsbox，虽然该工具能够同步image到七牛云，但是和自己想想的还是有一定差距，如：图片命名、存储目录、外链地址拷贝都比较麻烦。此时在简书上看到一篇文章如何使用七牛云做为图床？，看完后还是觉得步骤较为复杂，没有达到自己想要的效果，但它却触发了自己写个小工具的想法，于是开始构思工具包括哪些功能，最后确定如下功能： 支持从剪切板获取图像上传；灵感来自 作业部落 CMD Markdown图片上传效果（一款很棒的Markdown编辑工具） 支持本地图像上传； 支持从网络下载图像并上传； 图像上传后自动生成Markdown格式的图片引用标签； 支持删除已上传的图像； 支持系统托盘，类似QQ之类软件一样，双击打开。 开始编码由于博主目前对Java语言最熟，所以技术上只能选择Java，后续准备学习Python，开发一个Python版本的。 七牛Java SDK参考参考官方文档，链接地址 七牛同步代码 主要实现七牛云图片上传、删除功能！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100public class QiNiuSync &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); // 外链地址 private String outerLinkAddr = null; // 授权信息 private String ACCESS_KEY = null; private String SECRET_KEY = null; //要上传的空间 private String bucketName = null; //密钥配置 private Auth auth = null; //创建上传对象 private UploadManager uploadManager; public QiNiuSync() throws IOException &#123; if (outerLinkAddr == null) &#123; outerLinkAddr = ConfigUtil.getPropertie("OuterLinkAddr"); &#125; logger.info("OuterLinkAddr = " + outerLinkAddr); if (ACCESS_KEY == null) &#123; ACCESS_KEY = ConfigUtil.getPropertie("AccessKey"); &#125; logger.info("ACCESS_KEY = " + ACCESS_KEY); if (SECRET_KEY == null) &#123; SECRET_KEY = ConfigUtil.getPropertie("SecretKey"); &#125; logger.info("SECRET_KEY = " + SECRET_KEY); if (bucketName == null) &#123; bucketName = ConfigUtil.getPropertie("BucketName"); &#125; logger.info("BucketName = " + bucketName); if (auth == null)&#123; auth = Auth.create(ACCESS_KEY, SECRET_KEY); &#125; logger.info("auth = " + auth); if (uploadManager == null)&#123; uploadManager = new UploadManager(); &#125; logger.info("uploadManager = " + uploadManager); &#125; /** * 简单上传，使用默认策略，只需要设置上传的空间名就可以了 */ public String getUpToken() &#123; return auth.uploadToken(bucketName); &#125; /** * 图片上传 * * @param filePath 图片本地地址 * @param fileName 七牛Key * @return 上传成功返回图片外链地址，上传失败返回null * @throws IOException */ public String upload(String filePath, String fileName) &#123; try &#123; //调用put方法上传 Response res = uploadManager.put(filePath, fileName, getUpToken()); //打印返回的信息 logger.info("upload() Response : " + res.bodyString()); String outerLink = outerLinkAddr + fileName; logger.info("outerLink :" + outerLink); return outerLink; &#125; catch (Exception e) &#123; logger.error("upload() Exception : ", e); &#125; return null; &#125; /** * 图片删除 * * @param qiniuKey 七牛key * @return 删除成功返回true，删除失败返回false */ public boolean delete(String qiniuKey) &#123; try &#123; BucketManager bucketManager = new BucketManager(auth); //调用delete方法移动文件 bucketManager.delete(bucketName, qiniuKey); return true; &#125; catch (Exception e) &#123; logger.error("delete() Exception : ", e); &#125; return false; &#125;&#125; 剪切板代码 主要实现设置图片、文本信息到剪切板，从剪切板获取图片、文本信息！部分代码摘自网络。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889public class OperateClipboard &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd"); /** * 设置系统剪切板，内容为图片 * * @param image 图片 */ public void setImageClipboard(Image image) &#123; ImageSelection imgSel = new ImageSelection(image); Toolkit.getDefaultToolkit().getSystemClipboard().setContents(imgSel, null); &#125; /** * 获取剪贴板图像，并返回图像绝对路径 * * @param rootPath 存储图像根目录 * @return 获取成功返回图片路径；获取失败返回null */ public String getImageClipboard(String rootPath) &#123; try &#123; //create qiniu objecte Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard(); //Get data from qiniu and assign it to an image. //qiniu.getData() returns an object, so we need to cast it to a BufferdImage. BufferedImage image = (BufferedImage) clipboard.getData(DataFlavor.imageFlavor); //process file name DESEncrypts desEncrypts = new DESEncrypts(); String filePath = desEncrypts.encrypt(dateFormat.format(new Date())); String fileName = UUIDUtil.generateUUID() + ".png"; String rootFilePath = rootPath + filePath; File rootFile = new File(rootFilePath); if (!rootFile.exists()) &#123; rootFile.mkdirs(); &#125; String imageFileName = rootFilePath + File.separator + fileName; //file that we'll save to disk. File file = new File(imageFileName); //class to write image to disk. You specify the image to be saved, its type, // and then the file in which to write the image data. ImageIO.write(image, "png", file); logger.info("image capture success:" + imageFileName); return imageFileName; &#125; //getData throws this. catch (Exception e) &#123; logger.error("Exception:", e); return null; &#125; &#125; /** * 设置系统剪贴板，内容为文本 * * @param refContent 文本内容 */ public void setSystemClipboard(String refContent) &#123; String vc = refContent.trim(); StringSelection ss = new StringSelection(vc); Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null); &#125; /** * 获取系统剪切板的文本内容[如果系统剪切板复制的内容是文本] * * @return 获取成功返回剪切板内容，获取失败返回null */ public String getSystemClipboard() &#123; Clipboard sysClb = null; sysClb = Toolkit.getDefaultToolkit().getSystemClipboard(); Transferable t = sysClb.getContents(null); //Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null); //跟上面三行代码一样 try &#123; if (null != t &amp;&amp; t.isDataFlavorSupported(DataFlavor.stringFlavor)) &#123; String text = (String) t.getTransferData(DataFlavor.stringFlavor); return text; &#125; &#125; catch (Exception e) &#123; logger.error("Exception:", e); return null; &#125; return null; &#125;&#125; 成品工具操作面板 快捷上传 七牛云存储截图 搞定，主要功能操作面板上都有，基本上满足博主需求~~]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[小米2S刷安卓原生系统]]></title>
      <url>%2Fblog%2Fnotes%2Fxiaomi-flash-google-rom.html</url>
      <content type="text"><![CDATA[为了折腾一个游戏，把原来那台小米2S重新翻出来折腾，发现升到MIUI7后，那手机一个卡啊，真是醉了。作为一个喜欢折腾程序猿，立马就想到是不是可以刷个安卓原生系统，于是Google（不要问我为啥用Google，大家都懂的！！）一把，对比了几个原生系统，最后选择了秋叶随风大神提供的刷机包。 说明：本文只是记录自己刷机过程及刷机中遇到的问题，对于基本操作步骤，本文不做详细描述。 参考资料 秋大ROM 刷机贴 合并分区贴 下载软件 可自行Google，刷机ROM秋大帖子中有，也可从如下地址下载： 刷机ROM，链接：http://pan.baidu.com/s/1kVhJ5Uf 密码：xq3t ROM补丁包（解决刷机后打不开WIFI，无信号问题），链接：http://pan.baidu.com/s/1o8OqNTg 密码：n0je Recovery工具，链接：http://pan.baidu.com/s/1qY06jIs 密码：qmy4 谷歌服务包，链接：http://pan.baidu.com/s/1mifFBs8 密码：5axo 刷机步骤合并分区 网上一大把，参考贴 刷原生系统友情提示：请将刷机ROM和谷歌服务包一起拷贝到手机！ 网上也是一大把，参考贴 打补丁(解决没有基带问题) 相信大家上面两步很顺利完成了，都迫不及待进入系统，那速度的确是快啊，赶紧联网下载点APP吧，这时候发现WIFI始终打不开。博主也被这问题折腾了好久，以为是刷机步骤问题，重刷了两次还是有问题，后来只好继续Google，发现有个帖子说ROM刷完后，基带没有，需要打个补丁。 下载ROM补丁包，拷贝补丁包boot.img到Recovery工具目录 手机进入fastboot模式（不会再读一遍刷原生系统的帖子），并连接上电脑 刷入补丁包，博主Recovery工具在‪C:\Users\Jason\Desktop\Recovery 12341、打开命令行窗口：`开始`——`运行`——`输入cmd`——`回车`。2、进入刷机目录：cd ‪C:\Users\Jason\Desktop\Recovery（回车）3、刷入补丁包：fastboot flash boot boot.img（回车）4、等待提示ok之类字眼，重启进入手机 大功告成，欢迎留言！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows下ReviewBoard安装与配置]]></title>
      <url>%2Fblog%2Ftechnology%2Freviewboard-installing-on-windows.html</url>
      <content type="text"><![CDATA[安装准备安装文件清单 Mysql 5.6 下载链接 Apache 2.2 下载链接 Python 2.7 下载链接 mod_python 3.3 下载地址 py27-pysvn-svn 下载地址 参考链接 setuptools 下载地址 参考链接 patch-2.5.9.7-setup 下载地址 参考链接 memcached 下载地址 python-memcached 下载地址 参考地址 mysql-python 下载地址 参考链接 pycrypto-2.6.1 下载地址 mod_wsgi-win32-ap22py27-3.3.so 下载地址 RBTools 下载地址 安装步骤1. 安装Mysql安装完成后，注意修改默认编码格式为UTF-8123456789101112131415show variables like &apos;character%&apos;;#显示如下信息+--------------------------+---------------------------------------------------------+| Variable_name | Value |+--------------------------+---------------------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | C:\Program Files\MySQL\MySQL Server 5.6\share\charsets\ |+--------------------------+---------------------------------------------------------+ 2. 安装Apache完成后确认在Windows服务中启动并且在浏览器中输入localhost检查是否启动正常。 3. 安装Python注意要把python27和python27/scripts目录放到环境变量中 4. 安装mod_python-3.3.1.win32-py2.7.exe注意：安装mod_python的时候，需要停掉apache，安装后请检查apache的modules目录下是否有mod_python.so，如果没有请检查安装是否过程是否有问题 5. 安装py27-pysvn-svn1811-1.7.10-1584.exe6. 安装setuptools-0.6c11.win32-py2.7.exe7. 安装patch-2.5.9-7-setup.exe8. 安装memcached123456#1.解压memcached-win64-1.4.4-14.zip到E:\Tools\memcached#2.进入E:\Tools\memcached#3.执行命令，安装memcached为系统服务memcached.exe -d install 9. 安装python-memcached1234#1. 解压python-memcached-latest.tar.gz#2. 执行安装命令python setup.py install 10. 安装MySQL-python-1.2.5.win32-py2.7.exe11. 安装pycrypto-2.6.1.win32-py2.7.exe解决编译安装时出现以下错误:12345678910Downloading https://pypi.python.org/packages/source/p/pycrypto/pycrypto-2.6.1.tar.gz#md5=55a61a054aa66812daf5161a0d5d7edaProcessing pycrypto-2.6.1.tar.gzRunning pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\ch\appdata\local\temp\easy_install-sby0sc\pycrypto-2.6.1\egg-dist-tmp-wvzthpwarning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.gcc: error: unrecognized command line option &apos;-mno-cygwin&apos;error: Setup script exited with error: command &apos;C:\\cygwin64\\bin\\gcc.exe&apos; failed with exit status 1 12. 安装ReviewBoard12345#执行命令easy_install ReviewBoard#安装指定版本ReviewBoardeasy_install &quot;ReviewBoard&lt;2.0&quot; ReviewBoard配置1. 创建数据库及用户名12345678#创建数据库create database reviewboard character set utf8;#创建用户（下面会用到）create user &apos;reviewboard&apos;@&apos;localhost&apos; identified by &apos;reviewboard&apos;;#给用户授权grant all privileges on reviewboard.* to &apos;reviewboard&apos;@&apos;localhost&apos;; 2. 创建站点1234# 执行命令rb-site install e:\tools\reviews#按要求填写相关要素即可 3. Apache配置 add mod_python.so 到httpd.conf中LoadModule python_module modules/mod_python.so add mod_wsgi-win32-ap22py27-3.3.so 到httpd.conf中LoadModule wsgi_module modules/mod_wsgi-win32-ap22py27-3.3.so 将e:\tools\reviews\conf\apache-wsgi.conf内容添加到 vhosts到httpd-vhosts.conf中 123456789101112131415161718192021222324252627282930313233343536&lt;VirtualHost *:84&gt; ServerName reviews.com DocumentRoot &quot;E:/Tools/reviews/htdocs&quot; # Error handlers ErrorDocument 500 /errordocs/500.html WSGIPassAuthorization On WSGIScriptAlias &quot;/&quot; &quot;E:/Tools/reviews/htdocs/reviewboard.wsgi/&quot; &lt;Directory &quot;E:/Tools/reviews/htdocs&quot;&gt; AllowOverride All Options -Indexes +FollowSymLinks Allow from all &lt;/Directory&gt; # Prevent the server from processing or allowing the rendering of # certain file types. &lt;Location &quot;/media/uploaded&quot;&gt; SetHandler None Options None AddType text/plain .html .htm .shtml .php .php3 .php4 .php5 .phps .asp AddType text/plain .pl .py .fcgi .cgi .phtml .phtm .pht .jsp .sh .rb &lt;IfModule mod_php5.c&gt; php_flag engine off &lt;/IfModule&gt; &lt;/Location&gt; # Alias static media requests to filesystem Alias /media &quot;E:/Tools/reviews/htdocs/media&quot; Alias /static &quot;E:/Tools/reviews/htdocs/static&quot; Alias /errordocs &quot;E:/Tools/reviews/htdocs/errordocs&quot; Alias /favicon.ico &quot;E:/Tools/reviews/htdocs/static/rb/images/favicon.png&quot;&lt;/VirtualHost&gt; 修改E:\Tools\reviews\conf\settings_local.py 12345# DEBUG模式改为FalseDEBUG = False # 由True到False，这个我也做对了 # 添加可访问主机ALLOWED_HOSTS = [&apos;reviews.com&apos;,&apos;localhost&apos;,&apos;192.168.0.112&apos;] 重启Apache服务器 访问ReviewBoard站点 12客户端：http://[ip]:[port]管理端：http://[ip]:[port]/admin]]></content>
    </entry>

    
  
  
</search>
